<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lllki</title>
    <description>Lirian Su&#39;s Blog</description>
    <link>http://www.cloudisdream.com/</link>
    <atom:link href="http://www.cloudisdream.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 23 Sep 2015 14:39:13 +0800</pubDate>
    <lastBuildDate>Wed, 23 Sep 2015 14:39:13 +0800</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>如何优雅地使用Perl的常量模块</title>
        <description>&lt;p&gt;最近的Perl Coding遇到了一个问题：需要对一系列常量进行合法性检测。&lt;/p&gt;

&lt;p&gt;在Research&amp;amp;Develop后，有一些心得。&lt;/p&gt;

&lt;p&gt;本文从Perl的常量定义上，给出一个_自认为_优雅的解决方案。&lt;/p&gt;

&lt;h2 id=&quot;perl&quot;&gt;Perl中一般的常量定义&lt;/h2&gt;

&lt;p&gt;在写项目的时候为了避免Magic Number的情况，我们经常需要定义常量。&lt;/p&gt;

&lt;p&gt;当然了，根据&lt;a href=&quot;http://coolshell.cn/articles/4758.html&quot;&gt;如何写出无法维护的代码&lt;/a&gt;的指导我们不应当定义常量，Number越Magic越好。&lt;/p&gt;

&lt;p&gt;一般来说，Perl中的常量如下：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    use constant CONST_PI =&amp;gt; 3.1416;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在模块化的编码过程中，随着常量的增多，我们会需要把这些常量放到一个常量模块(Perl Module)里面：&lt;/p&gt;

&lt;p&gt;这样的做法也符合DRY(Don’t Repeat Yourself)的原则。#DRYBestPractice?&lt;/p&gt;

&lt;p&gt;比如说在哼哧哼哧地写了一阵子以后，我们有下面这个常量模块。&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    package Lirian::Constants;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    use strict;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    use warnings;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    #Math Const
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    use constant CONST_PI =&amp;gt; 3.1416;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    use constant CONST_E  =&amp;gt; 2.718;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    #Default Config Parm Name
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    use constant PARM_DB_NAME  =&amp;gt; &#39;dbName&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    use constant PARM_DB_HOST  =&amp;gt; &#39;dbHost&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    use constant PARM_GIT_USER =&amp;gt; &#39;gitUser&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    require Exporter;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    our @ISA = qw(Exporter);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    our @EXPORT_OK = qw(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;        CONST_PI
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;        CONST_E
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        PARM_DB_NAME
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;        PARM_DB_HOST
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;        PARM_GIT_USER
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    );
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    our %EXPORT_TAGS = (
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;        all  =&amp;gt; \@EXPORT_OK,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;        math =&amp;gt; [qw(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;            CONST_PI
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;            CONST_E
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        )],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;        parm =&amp;gt; [qw(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;            PARM_DB_NAME
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;            PARM_DB_HOST
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;            PARM_GIT_USER
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;        )],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;    );
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;上面这段代码简单粗暴地展示了Perl中的常量模块。&lt;/p&gt;

&lt;p&gt;其中的&lt;code&gt;our @ISA = qw(Exporter);&lt;/code&gt;是表示本模块继承了&lt;a href=&quot;http://perldoc.perl.org/Exporter.html&quot;&gt;Exporter&lt;/a&gt;这个模块。&lt;/p&gt;

&lt;p&gt;通过这样的定义，我们便有了一个常量的“中心仓库”了。&lt;/p&gt;

&lt;p&gt;至于怎么使用，我们就来看下一节。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;使用常量模块&lt;/h2&gt;

&lt;p&gt;在上一节中，通过对Exporter的继承，我们有了一个Lirian::Constants模块。&lt;/p&gt;

&lt;p&gt;而一般地，我们会这么使用：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    package Lirian::Math;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    use Lirian::Constants qw(:all);
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    use strict;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    use warnings;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    sub get_circum {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;        my ($r) = @_;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        return 2 * CONST_PI * $r;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    1;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在正常的情况下，常量的使用方法比较简单，但假如需求有些绕：&lt;/p&gt;

&lt;p&gt;在程序的开始时，我们需要检验用户的配置文件，确保每个条目用户都是有效的。&lt;/p&gt;

&lt;p&gt;比如说需求文件如下：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    dbName=github
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    dbHost=localhost
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    gitUser=LKI
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;显然地，一种简单但稍微蠢了点的方法是这么做：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    sub validate_config_dumb {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;        my ($conf) = @_;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        validate_parm($conf, PARM_DB_NAME);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;        validate_parm($conf, PARM_DB_HOST);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        validate_parm($conf, PARM_GIT_USER);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;这样做有几个问题：&lt;/p&gt;

&lt;p&gt;1.config parameter一多，代码就很长，丑&lt;br /&gt;
2.增加config constant时，不仅要改常量模块，这里也要加，累&lt;br /&gt;
3.这样的代码提交上去感觉好丢脸，蠢&lt;br /&gt;
4.以上三点在&lt;a href=&quot;http://coolshell.cn/articles/2058.html&quot;&gt;撞大运编程&lt;/a&gt;里都不是问题&lt;/p&gt;

&lt;p&gt;那怎么样做才算是优雅的做法呢？&lt;/p&gt;

&lt;h2 id=&quot;perlexport&quot;&gt;利用Perl的Export机制&lt;/h2&gt;

&lt;p&gt;在Exporter中，定义在%EXPORT_TAGS中的文件可以直接引用：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    my $tags      = \$Lirian::Constants::EXPORT_TAGS;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    my $math_tags = $tags-&amp;gt;{math}; # [&#39;CONST_PI&#39;, &#39;CONST_E&#39;];
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    my $parm_tags = $tags-&amp;gt;{parm}; # [&#39;PARM_DB_NAME&#39;, &#39;PARM_DB_HOST&#39;, &#39;PARM_GIT_USER&#39;];
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;这样就可以拿到常量的名字了，此时我们便需要&lt;a href=&quot;http://stackoverflow.com/questions/2187682/how-do-i-access-a-constant-in-perl-whose-name-is-contained-in-a-variable&quot;&gt;在Perl中根据变量名获取变量值&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    my $name  = &#39;CONST_PI&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    my $value = Lirian::Constants-&amp;gt;$name; # 3.1416
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;所以在上一小节的问题中，我们可以得出一个更优雅的解决方案啦~&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    sub validate_config {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;        my ($conf) = @_;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        my $tags      = \$Lirian::Constants::EXPORT_TAGS;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;        my $parm_tags = $tags-&amp;gt;{parm};
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        foreach my $parm_name (@$parm_tags) {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;            my $parm_value = Lirian::Constants-&amp;gt;$parm_name;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;            validate_parm($conf, $parm_value);
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;        }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;大功告成！从此以后在加常量的同时，validate_config会自动地检验新增的配置选项啦~&lt;/p&gt;

&lt;p&gt;此时便可以使用&lt;a href=&quot;http://whatthecommit.com/&quot;&gt;一个酷炫的Git Commit Message&lt;/a&gt;来提交工作啦！&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Jul 2015 04:56:06 +0800</pubDate>
        <link>http://www.cloudisdream.com/how-to-set-perl-constant-module</link>
        <guid isPermaLink="true">http://www.cloudisdream.com/how-to-set-perl-constant-module</guid>
        
        
      </item>
    
      <item>
        <title>Vagrant-up遇到mount no device的解决方案</title>
        <description>&lt;p&gt;今天跑&lt;code&gt;vagrant up&lt;/code&gt;的时候遇到了这个问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; cvc-tools: Machine booted and ready!
==&amp;gt; cvc-tools: Checking for guest additions in VM...
==&amp;gt; cvc-tools: Configuring and enabling network interfaces...
==&amp;gt; cvc-tools: Mounting shared folders...
    cvc-tools: /work =&amp;gt; D:/work/
Failed to mount folders in Linux guest. This is usually because
the &quot;vboxsf&quot; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u devel`,gid=`getent group devel | cut -d:
-f3` work /work
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看了 https://github.com/mitchellh/vagrant/issues/1657&lt;br /&gt;
以后，明白这是&lt;code&gt;yum update&lt;/code&gt;更新了内核，但是没有更新VirtualBox的连接的问题。&lt;/p&gt;

&lt;p&gt;于是重新添加一下VBox：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[lirian@localhost ~]$ sudo /etc/init.d/vboxadd setup
Removing existing VirtualBox non-DKMS kernel modules       [  OK  ]
Building the VirtualBox Guest Additions kernel modules
The headers for the current running kernel were not found. If the
following
module compilation fails then this could be the reason.
The missing package can be probably installed with
yum install kernel-devel-2.6.18-404.el5

Building the main Guest Additions module                   [FAILED]
(Look at /var/log/vboxadd-install.log to find out what went wrong)
Doing non-kernel setup of the Guest Additions              [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据以上信息，得知现在在跑的内核开发包缺失，于是再跑一下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install kernel-devel-2.6.18-404.el5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后再vagrant up或者手动mount就可以解决问题了。&lt;/p&gt;

&lt;p&gt;总结：vagrant up遇到mount error: no such device可以通过以下脚本解决：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install kernel-devel-2.6.18-404.el5
/etc/init.d/vboxadd setup
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 15 May 2015 18:29:05 +0800</pubDate>
        <link>http://www.cloudisdream.com/vagrant-up-but-mount-no-device-zh</link>
        <guid isPermaLink="true">http://www.cloudisdream.com/vagrant-up-but-mount-no-device-zh</guid>
        
        
      </item>
    
      <item>
        <title>Solution for vagrant-up error: mount no device</title>
        <description>&lt;p&gt;Solution for vagrant up failure with mount no such device error:&lt;/p&gt;

&lt;p&gt;Today I encounter a problem running &lt;code&gt;vagrant up&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; cvc-tools: Machine booted and ready!
==&amp;gt; cvc-tools: Checking for guest additions in VM...
==&amp;gt; cvc-tools: Configuring and enabling network interfaces...
==&amp;gt; cvc-tools: Mounting shared folders...
    cvc-tools: /work =&amp;gt; D:/work/
Failed to mount folders in Linux guest. This is usually because
the &quot;vboxsf&quot; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u devel`,gid=`getent group devel | cut -d:
-f3` work /work
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to https://github.com/mitchellh/vagrant/issues/1657 &lt;/p&gt;

&lt;p&gt;_This is usually a result of the guest’s package manager upgrading the&lt;/p&gt;

&lt;p&gt;kernel without rebuilding the VirtualBox Guest Additions_ by lenciel. So&lt;br /&gt;
we run vboxadd accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [lirian@localhost ~]$ sudo /etc/init.d/vboxadd setup
    Removing existing VirtualBox non-DKMS kernel modules       [  OK  ]
    Building the VirtualBox Guest Additions kernel modules
    The headers for the current running kernel were not found. If the
    following
    module compilation fails then this could be the reason.
    The missing package can be probably installed with
    yum install kernel-devel-2.6.18-404.el5

    Building the main Guest Additions module                   [FAILED]
    (Look at /var/log/vboxadd-install.log to find out what went wrong)
    Doing non-kernel setup of the Guest Additions              [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the message we can know current running kernel were not found. So&lt;br /&gt;
we run:&lt;code&gt;yum install kernel-devel-2.6.18-404.el5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After all, we can run &lt;code&gt;vagrant up&lt;/code&gt; or mount the directory manually.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 May 2015 18:29:05 +0800</pubDate>
        <link>http://www.cloudisdream.com/vagrant-up-but-mount-no-device-en</link>
        <guid isPermaLink="true">http://www.cloudisdream.com/vagrant-up-but-mount-no-device-en</guid>
        
        
      </item>
    
      <item>
        <title>用Openpyxl做两个Excel文件的比对</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;最近老是要做比对Excel报表的工作，于是想写一个Python的小脚本来做这个工作。&lt;br /&gt;
关于Python的Excel处理，以前只用过xlrd库，处理的是Office03的.xls文件。&lt;br /&gt;
这次写小工具的同时也是学习一下新的东西。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;由于本次要比对的报表是Office07的.xlsx文件，上网查了一下Python怎么做比较合适。&lt;br /&gt;
看了几篇心得以后，敲定用Openpyxl（参考如下链接：）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.gocalf.com/blog/python-read-write-excel.html&quot;&gt;Python处理Excel的四个工具&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是接下来是装Openpyxl，到官网上按照流程装了一发：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://pythonhosted.org/openpyxl/&quot;&gt;A Python Library: Openpyxl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于源码是到BitBucket上拖下来的，所以顺便还装了SourceTree。&lt;br /&gt;
据说SourceTree还有Git的相关功能，下次可以体验一下。&lt;/p&gt;

&lt;h2 id=&quot;openpyxl&quot;&gt;使用Openpyxl&lt;/h2&gt;

&lt;p&gt;Openpyxl装好以后直接import就能用啦：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;from&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;openpyxl&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Openpyxl还提供了一个非常棒的教程~~（有点过于简单~~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://pythonhosted.org/openpyxl/tutorial.html&quot;&gt;Openpyxl Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Openpyxl还有个弊端就是文档不怎么详细，只能去翻源码。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最终代码&lt;/h2&gt;

&lt;p&gt;可以到我写的PythonScripts里找到我写的版本：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LKI/PythonScripts/tree/master/ExcelComparer&quot;&gt;PythonScripts - ExcelComparer&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Aug 2014 18:31:08 +0800</pubDate>
        <link>http://www.cloudisdream.com/compare-excel-using-openpyxl/</link>
        <guid isPermaLink="true">http://www.cloudisdream.com/compare-excel-using-openpyxl/</guid>
        
        
      </item>
    
  </channel>
</rss>
