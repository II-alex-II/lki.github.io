<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>浮云计算</title>
    <description>Lirian Su&#39;s Blog</description>
    <link>http://www.liriansu.com/</link>
    <atom:link href="http://www.liriansu.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 21 Oct 2015 14:57:29 +0800</pubDate>
    <lastBuildDate>Wed, 21 Oct 2015 14:57:29 +0800</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>利用AUFS和Docker搭建多个私有开发环境</title>
        <description>&lt;p&gt;文章的开头先提个问题：&lt;br /&gt;
我们平常的工作中，一般都是怎样让每个人都拿到独立开发环境的呢？&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;section&quot;&gt;八仙过海&lt;/h2&gt;

&lt;p&gt;比如最常见的做法：每人都有自己的电脑，爱怎么弄怎么弄，同步代码就用Git之类的。&lt;br /&gt;
但是这样初始化的过程很慢，要装各种软件各种配置。&lt;/p&gt;

&lt;p&gt;于是也有的是建一个中心服务器，大家用Putty这类软件SSH上去，每个人都有自己的账号。&lt;br /&gt;
但是这样环境不独立，而且权限控制很麻烦（毕竟每个人都想sudo）&lt;/p&gt;

&lt;p&gt;后来就直接分发虚拟机镜像了，每个人拿到一个10G的镜像文件，&lt;br /&gt;
直接Load一下，环境就起来了。&lt;br /&gt;
但是这样每次修改环境就要更新近10G…&lt;/p&gt;

&lt;p&gt;反正就是八仙过海，各有神通了。&lt;br /&gt;
利用&lt;a href=&quot;http://coolshell.cn/articles/17061.html&quot;&gt;AUFS&lt;/a&gt;和&lt;a href=&quot;/virtual-machine-vs-vagrant-vs-docker&quot;&gt;Docker&lt;/a&gt;也可以做到给每个人独立开发环境。&lt;/p&gt;

&lt;h2 id=&quot;aufs&quot;&gt;AUFS&lt;/h2&gt;

&lt;p&gt;根据Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AuFS stands for Another Union File System. AuFS started as an implementation of UnionFS Union File System. An union filesystem takes an existing filesystem and transparently overlays it on a newer filesystem. It allows files and directories of separate filesystem to co-exist under a single roof.May 8, 2013&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假设我们有一个目录如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
└── public
    ├── database
    │   ├── dbfile1
    │   └── dbfile2
    └── src
        ├── helloworld.lisp
        └── sudoku.lisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们希望以public目录为基础，给每个人创建一个private环境&lt;br /&gt;
于是我们跑几条命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir change private
$ mount -t aufs -o dirs=./change:./public none ./private
$ tree
.
├── change
├── private
│   ├── database
│   │   ├── dbfile1
│   │   └── dbfile2
│   └── src
│       ├── helloworld.lisp
│       └── sudoku.lisp
└── public
    ├── database
    │   ├── dbfile1
    │   └── dbfile2
    └── src
        ├── helloworld.lisp
        └── sudoku.lisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mount命令中，-t指定了type是aufs，-o是option&lt;br /&gt;
把change命令以读写权限，public目录以只读权限mount到了private里面&lt;/p&gt;

&lt;p&gt;假设我们在private命令中新增，修改了一个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd private/
$ touch newfile
$ echo &quot;Changes&quot; &amp;gt; src/sudoku.lisp
$ cd ..
$ tree
.
├── change
│   ├── newfile
│   └── src
│       └── sudoku.lisp
├── private
│   ├── database
│   │   ├── dbfile1
│   │   └── dbfile2
│   ├── newfile
│   └── src
│       ├── helloworld.lisp
│       └── sudoku.lisp
└── public
    ├── database
    │   ├── dbfile1
    │   └── dbfile2
    └── src
        ├── helloworld.lisp
        └── sudoku.lisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到我们在private环境中所做的所有改动都在change中发生了！&lt;/p&gt;

&lt;p&gt;这就相当于图层（Layer）的叠加，我们往只读的public层上叠加了一层可写的change层。
&lt;em&gt;不过对于删除文件的情况要进行额外的检测&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;与Docker的叠加&lt;/h2&gt;

&lt;p&gt;有了上例中的mount，那和Docker就很好叠加了&lt;br /&gt;
利用&lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot;&gt;Docker的Volume&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -ti -v /tmp/docker/private:/work ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以把private目录作为volume映射到docker container里面的/work目录了。&lt;br /&gt;
剩下的就是&lt;a href=&quot;https://docs.docker.com/userguide/dockerimages/&quot;&gt;Get good use of docker images&lt;/a&gt;了~&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Oct 2015 22:55:24 +0800</pubDate>
        <link>http://www.liriansu.com/build-seperate-env-using-aufs-and-docker</link>
        <guid isPermaLink="true">http://www.liriansu.com/build-seperate-env-using-aufs-and-docker</guid>
        
        
      </item>
    
      <item>
        <title>Virtual Machine, Vagrant, Docker的区别</title>
        <description>&lt;p&gt;Virtualization——虚拟化技术一直是计算机世界里面很重要的东西。&lt;br /&gt;
一般程序员听到这个词首先浮现出的就是Windows下面开着装着Linux系统的VMware。&lt;br /&gt;
而这个“装着Linux系统的VMware”就是我们口中的虚拟机（Virtual Machine）&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;虚拟机的主要好处是可以创建一个与主机操作系统不同的开发环境&lt;br /&gt;
（比如说一般的办公室都是Windows系统电脑）&lt;/p&gt;

&lt;p&gt;但是开发的便利也会导致初始化一个这样的环境比较麻烦&lt;br /&gt;
而且当项目进行到一定程度，对环境本身一些变化有依赖的时候&lt;br /&gt;
从零开始创建虚拟机的开发环境会很繁琐&lt;br /&gt;
Vagrant就是一种用来解决这种繁琐的工具&lt;/p&gt;

&lt;h2 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&quot;https://docs.vagrantup.com/v2/why-vagrant/index.html&quot;&gt;官方的说法&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vagrant本身不做虚拟机的工作，而是允许用户用VMware|VirtualBox|AWS来启动虚拟机镜像，他们管这叫Provider&lt;br /&gt;
当然了，镜像在Vagrant这里叫Box，而且很多公司已经做好了初始化的Box&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;在这里&lt;/a&gt;可以直接用&lt;br /&gt;
Vagrant还提供了对Box的初始化脚本（Provisioning），这些初始化脚本可以用更多的脚本工具来完成对Box的配置&lt;/p&gt;

&lt;p&gt;所以其实相比于传统的虚拟机，Vagrant是站在巨人的肩膀上，完成了自动化。&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;p&gt;Docker项目的目标是实现轻量级的虚拟化方案，它和Virtual Machine最大的不同是Docker容器共享操作系统的内核
&lt;img src=&quot;http://dockerpool.com/static/books/docker_practice/_images/virtualization.png&quot; alt=&quot;vm&quot; /&gt;
&lt;img src=&quot;http://dockerpool.com/static/books/docker_practice/_images/docker.png&quot; alt=&quot;docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以Docker和传统虚拟机的对比是明显的：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;Docker&lt;/th&gt;
      &lt;th&gt;Virtual Machine&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;启动&lt;/td&gt;
      &lt;td&gt;秒级&lt;/td&gt;
      &lt;td&gt;分钟级&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;大小&lt;/td&gt;
      &lt;td&gt;一般为MB&lt;/td&gt;
      &lt;td&gt;一般为GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;性能&lt;/td&gt;
      &lt;td&gt;近原生&lt;/td&gt;
      &lt;td&gt;弱于原生&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;单机支持量&lt;/td&gt;
      &lt;td&gt;上千个&lt;/td&gt;
      &lt;td&gt;一般几十个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;内核&lt;/td&gt;
      &lt;td&gt;共享&lt;/td&gt;
      &lt;td&gt;独立&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;vagrant-vs-docker&quot;&gt;Vagrant vs Docker&lt;/h2&gt;
&lt;p&gt;讲道理的话，这两个不应该放在一起比较， 这两者的虚拟化级别并不是一个量级上的&lt;br /&gt;
而且这两者并不矛盾，假如你需要在Windows系统上搭载数个特定发行版的Linux系统，完全可以先用Vagrant + Virtual Machine再嵌数个Docker&lt;/p&gt;

&lt;p&gt;硬要比较的话，假如你需要运行跨平台的虚拟，那就用Vagrant，&lt;em&gt;否则&lt;/em&gt;，用Docker&lt;/p&gt;

&lt;p&gt;最后再来张表对比一下吧：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;Virtual Machine&lt;/th&gt;
      &lt;th&gt;Vagrant&lt;/th&gt;
      &lt;th&gt;Docker&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;虚拟化&lt;/td&gt;
      &lt;td&gt;完全虚拟化&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
      &lt;td&gt;系统虚拟化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;镜像管理&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
      &lt;td&gt;有，一般为GB&lt;/td&gt;
      &lt;td&gt;有，一般为MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;性能&lt;/td&gt;
      &lt;td&gt;弱于原生系统&lt;/td&gt;
      &lt;td&gt;弱于原生系统&lt;/td&gt;
      &lt;td&gt;接近原生系统&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;内核&lt;/td&gt;
      &lt;td&gt;独立&lt;/td&gt;
      &lt;td&gt;独立&lt;/td&gt;
      &lt;td&gt;共享&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://dockerpool.com/static/books/docker_practice/index.html&quot;&gt;《Docker —— 从入门到实践》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.vagrantup.com/v2/why-vagrant/index.html&quot;&gt;Why Vagrant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shell909090/slides/blob/master/md/docker.md&quot;&gt;Docker不是虚拟机&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16647069/should-i-use-vagrant-or-docker-io-for-creating-an-isolated-environment&quot;&gt;Shoud I use vagrant or docker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 12 Oct 2015 20:49:55 +0800</pubDate>
        <link>http://www.liriansu.com/virtual-machine-vs-vagrant-vs-docker</link>
        <guid isPermaLink="true">http://www.liriansu.com/virtual-machine-vs-vagrant-vs-docker</guid>
        
        
      </item>
    
      <item>
        <title>VIM中小键盘失灵的解决方案(Putty)</title>
        <description>&lt;p&gt;我目前的开发环境是用&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;起一个虚拟机，然后用&lt;a href=&quot;http://www.putty.org/&quot;&gt;Putty&lt;/a&gt;连上去，用VIM做日常的开发工作。&lt;/p&gt;

&lt;p&gt;但某一天更新了一些配置以后，我在VIM里用小键盘输入1的时候，VIM就会在前一行加了一个q字符，让我很是困惑。&lt;/p&gt;

&lt;p&gt;后来&lt;a href=&quot;http://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings&quot;&gt;谷歌了一下这个问题&lt;/a&gt;，得知只要把Putty的Application keypad mode给关了就行了。&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;section&quot;&gt;奇怪的错误&lt;/h2&gt;

&lt;p&gt;当刚开始小键盘的输入和预期有差别的时候，其实我是很困惑的。&lt;/p&gt;

&lt;p&gt;首先我在Bash里面小键盘一切正常，这说明我键盘没问题，应该是VIM哪里不对。&lt;/p&gt;

&lt;p&gt;其次我按的是1，结果出来的是前一行的q，我再按一下2，出来的是前一行的r。&lt;br /&gt;
假如键盘没有问题，要自己在VIM里面实现一个这种“功能”，那也要加一行配置：
&lt;code&gt;inoremap &amp;lt;Num1&amp;gt; &amp;lt;Esc&amp;gt;Oq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是这也太奇怪了吧，VIM里面怎么可能把&lt;code&gt;&amp;lt;Num1&amp;gt;&lt;/code&gt;给替换成&lt;code&gt;&amp;lt;Esc&amp;gt;Oq&lt;/code&gt;这么奇怪的东西？&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;寻求答案&lt;/h2&gt;

&lt;p&gt;于是我找到了&lt;a href=&quot;http://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings&quot;&gt;VIM wiki上的一篇解答&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;根据这篇解答，问题是出在Putty上。&lt;br /&gt;
Putty会默认启用“Application Keypad Mode”，这个选项被启用以后&lt;br /&gt;
所有小键盘上的按键（包括&lt;numlock&gt;）都会输出一串按键序列：&lt;/numlock&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;原按键&lt;/th&gt;
      &lt;th&gt;生成序列&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num1&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Oq&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num2&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Or&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num3&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Os&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num4&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Ot&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num5&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Ou&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num6&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Ov&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num7&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Ow&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num8&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Ox&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num9&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Oy&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Num0&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Op&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;On&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;OQ&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;OR&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;Ol&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;OS&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;OM&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;居然&lt;code&gt;&amp;lt;Num1&amp;gt;&lt;/code&gt;真的变成了&lt;code&gt;&amp;lt;Esc&amp;gt;Oq&lt;/code&gt;！&lt;/p&gt;

&lt;p&gt;再去翻&lt;a href=&quot;http://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter4.html#config-appkeypad&quot;&gt;Putty关于Application keypad mode的说明&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Application Keypad mode is a way for the server to change the behaviour of the numeric keypad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;唔，好吧，是服务器端决定的配置。&lt;/p&gt;

&lt;p&gt;所以在Putty下简单的解决方案就是关掉这个模式了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;打开Putty配置&lt;/li&gt;
  &lt;li&gt;选中左边的Terminal -&amp;gt; Features&lt;/li&gt;
  &lt;li&gt;在”Disable application keypad mode”处打钩&lt;/li&gt;
  &lt;li&gt;选中左边的Session&lt;/li&gt;
  &lt;li&gt;保存Putty配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/putty_application_keypad_mode.jpg&quot; alt=&quot;关闭application keypad mode&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;更多奇怪的答案&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&quot;http://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings#Comments&quot;&gt;VIM wiki页面的讨论板块&lt;/a&gt;，有人给出了一个看起来很蠢的解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:inoremap &amp;lt;Esc&amp;gt;Oq 1
:inoremap &amp;lt;Esc&amp;gt;Or 2
:inoremap &amp;lt;Esc&amp;gt;Os 3
:inoremap &amp;lt;Esc&amp;gt;Ot 4
:inoremap &amp;lt;Esc&amp;gt;Ou 5
:inoremap &amp;lt;Esc&amp;gt;Ov 6
:inoremap &amp;lt;Esc&amp;gt;Ow 7
:inoremap &amp;lt;Esc&amp;gt;Ox 8
:inoremap &amp;lt;Esc&amp;gt;Oy 9
:inoremap &amp;lt;Esc&amp;gt;Op 0
:inoremap &amp;lt;Esc&amp;gt;On .
:inoremap &amp;lt;Esc&amp;gt;OQ /
:inoremap &amp;lt;Esc&amp;gt;OR *
:inoremap &amp;lt;Esc&amp;gt;Ol +
:inoremap &amp;lt;Esc&amp;gt;OS -
:inoremap &amp;lt;Esc&amp;gt;OM &amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;刚开始看到这个答案我立刻想到了这张XKCD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/workflow.png&quot; alt=&quot;workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我认为mapping不应该是一个合适的解决方案，但是下面又有人讲了他自己苦逼的故事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After a while struggling with this very problem with vnc viewer 4.1.3 under XP with a Debian lenny vnc4server 4.1.1+X4.3.0-31, this vim remapping is the only solution which work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，至少他找到了解决方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png&quot; alt=&quot;solution&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 09 Oct 2015 23:34:16 +0800</pubDate>
        <link>http://www.liriansu.com/use-keypad-with-vim-and-putty</link>
        <guid isPermaLink="true">http://www.liriansu.com/use-keypad-with-vim-and-putty</guid>
        
        
      </item>
    
      <item>
        <title>这篇博客是怎么建成的</title>
        <description>&lt;p&gt;其实最开始的时候我是用&lt;a href=&quot;https://en.wikipedia.org/wiki/LAMP_(software_bundle)&quot;&gt;LAMP&lt;/a&gt;在学校的IP上搭了一个个人博客，当时这么搭博客有几个很蠢的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;晚上11点断网，早上6点才恢复网络，所以这个“个人博客”会断网&lt;/li&gt;
  &lt;li&gt;学校把对外的80端口给封了，而域名访问默认就是80，所以校外访问博客要变成 &lt;code&gt;http://cloudisdream:8080&lt;/code&gt;这种奇怪的模式&lt;/li&gt;
  &lt;li&gt;由于是自己的电脑做服务器，还得保证一直开着，这样始终不太好&lt;/li&gt;
&lt;/ul&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;java--servlet--structs--spring--hibernate&quot;&gt;JAVA / Servlet / Structs + Spring + Hibernate&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在收了可观的小费以后，旅店老板悄悄地告诉你： 每个大学的软件工程专业都会教JAVA+SSH&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实在LAMP之前，我曾经试过用课程里的Java+Servlet写过一个类微博的（个人？）网站&lt;/p&gt;

&lt;p&gt;大概长这样子:
&lt;img src=&quot;/assets/thatsMoonPage.jpg&quot; alt=&quot;First site&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一边写我就一边感慨网页设计真是艰难，而且其实这个主页也是模仿当时的网易微博的&lt;/p&gt;

&lt;h2 id=&quot;lamp--wordpress&quot;&gt;LAMP + WordPress&lt;/h2&gt;

&lt;p&gt;在前台HTML CSS JS到后台JAVA SQL都写过一遍以后，我开始意识到全栈工程师虽然听起来很美好，但是写起来实在是心太累了&lt;/p&gt;

&lt;p&gt;那个时候和ED聊天，刚好聊到&lt;a href=&quot;http://edward-mj.com/&quot;&gt;他的博客&lt;/a&gt;是用WordPress搭的，于是我就在自己的电脑上搭了一个服务器&lt;/p&gt;

&lt;p&gt;虽然文章开头说了这么搭建服务器的缺点，但是其实学校还是给我们提供了一个便利：&lt;strong&gt;固定IP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;于是我就去万网买了个域名，CNAME一下到学校IP。&lt;/p&gt;

&lt;p&gt;但是因为实在遭不住一直开机，还要断网，后来还是抛弃掉了这个方式。&lt;/p&gt;

&lt;h2 id=&quot;github-pages--jekyll&quot;&gt;Github Pages + Jekyll&lt;/h2&gt;

&lt;p&gt;现在的博客就是最简单的&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网页放在GitHub上可以享受版本控制这个得天独厚的优势，Jekyll用的是Ruby，简单易用好上手。&lt;/p&gt;

&lt;p&gt;从无到有搭建博客基本上就这么几步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;注册Github账号，并创建 account.github.com 这个目录&lt;/li&gt;
  &lt;li&gt;跑&lt;code&gt;gem install jekyll&lt;/code&gt;，然后&lt;code&gt;gem new my-site&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改&lt;code&gt;_config.yml&lt;/code&gt;到自己的配置，然后在&lt;code&gt;_post&lt;/code&gt;文件夹里面新增博客即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;博客少了评论总感觉哪里不对，因为是GitHub上的静态页面，基本上解决方案有：用&lt;a href=&quot;http://duoshuo.com/&quot;&gt;多说评论&lt;/a&gt;，&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;，或者是用GitHub issue来定制化评论&lt;br /&gt;
（我一开始还以为disqus == disquz）&lt;/p&gt;

&lt;p&gt;综合各方面，我采用了Disqus，根据&lt;a href=&quot;https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions&quot;&gt;官方的说明文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接在Page里面插入一段Comment Code就可以了。&lt;/p&gt;

&lt;h2 id=&quot;enhancement&quot;&gt;Enhancement&lt;/h2&gt;

&lt;p&gt;至此，基本主题的博客已全部搭建完毕&lt;/p&gt;

&lt;p&gt;但是还有几点不足的地方：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;页面最下方的Twitter图标最好要改成Weibo的（但是我还没搞懂怎么画）&lt;/li&gt;
  &lt;li&gt;要补完About界面&lt;/li&gt;
  &lt;li&gt;使用Kramdown的GFM render方式感觉还是不够好，尤其是界面上，还是&lt;a href=&quot;https://github.com/LKI/blogs/issues/3&quot;&gt;GitHub Issue的Render方式&lt;/a&gt;看起来比较舒服&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看来以后在写博客的同时，也要对网站持续进行优化才可以呀！&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Sep 2015 04:26:17 +0800</pubDate>
        <link>http://www.liriansu.com/how-this-blog-was-built</link>
        <guid isPermaLink="true">http://www.liriansu.com/how-this-blog-was-built</guid>
        
        
      </item>
    
      <item>
        <title>为什么我要写博客</title>
        <description>&lt;p&gt;我其实很喜欢看别人写的东西，&lt;a href=&quot;http://coolshell.cn/articles/4758.html&quot;&gt;技术类的&lt;/a&gt;、&lt;a href=&quot;http://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html&quot;&gt;非技术类的&lt;/a&gt;，&lt;a href=&quot;http://blog.csdn.net/redguardtoo/article/details/7222501&quot;&gt;中文的&lt;/a&gt;、&lt;a href=&quot;http://blog.codinghorror.com/show-dont-tell/&quot;&gt;英文的&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很多人写文章的时候总喜欢说一句&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我先抛砖引玉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是往往&lt;a href=&quot;http://coolshell.cn/articles/11312.html&quot;&gt;他们写的都非常好&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这样的文章看的我特手痒，想也写博客，但是问题就来了&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;section&quot;&gt;博客的主题是什么？&lt;/h2&gt;

&lt;p&gt;我一直有着写点什么的习惯，以前总是休闲散文写的比较多，更多是偏向于一种日记类的文章。&lt;br /&gt;
自从看了&lt;a href=&quot;http://coolshell.cn/haoel&quot;&gt;陈皓&lt;/a&gt;和&lt;a href=&quot;http://blog.codinghorror.com/about-me/&quot;&gt;Jeff Atwood&lt;/a&gt;的技术类博客以后，总有种写&lt;em&gt;好的&lt;/em&gt;技术博客的冲动。&lt;br /&gt;
因为我对逻辑、语言、思考都感兴趣，而我又不能准确描述我这些兴趣，那我就把它们都写出来好了。&lt;/p&gt;

&lt;p&gt;XKCD的自我描述是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A webcomic of romance, sarcasm, math and language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/standards.png&quot; alt=&quot;XKCD-927&quot; /&gt;&lt;/p&gt;

&lt;p&gt;希望我也能写出这种主题鲜明，又有趣又妙不可言的文章&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我有什么能写出来的?&lt;/h2&gt;
&lt;p&gt;作为一个菜鸟，我最熟练的VIM水平其实放在网络上也只是一般&lt;br /&gt;
同时根据&lt;code&gt;三人行必有我师焉&lt;/code&gt;，也意味着来到这个博客的人中每三个里就有一个比我厉害&lt;/p&gt;

&lt;p&gt;（我是不是应该放一个博客访问计数器？然后每到三个倍数就alert(“Congratulations”)一下…&lt;/p&gt;

&lt;p&gt;不过既然大家都比我懂的多，那我也就不怕献丑了。&lt;br /&gt;
好玩的，要费脑子的问题，或者对人生的杂念都会被我写下来。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;中文博客还是英文博客？&lt;/h2&gt;
&lt;p&gt;讲道理的话，这个问题我想了很久。&lt;br /&gt;
以至于我都快走火入魔了，同样的文章写了&lt;a href=&quot;/vagrant-up-but-mount-no-device-zh&quot;&gt;一份中文的&lt;/a&gt;和&lt;a href=&quot;/vagrant-up-but-mount-no-device-en&quot;&gt;一份英文的&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后来想了想，主要基于几个观点：&lt;br /&gt;
1. 母语是中文，所以中文写的会比英文写的更顺畅&lt;br /&gt;
2. 语言的选择决定了受众的范围，而外国受众大部分不了解中国的亚文化&lt;br /&gt;
3. 个人而言，以后认识的国内朋友可能会更多，这本身是一个不错的名片&lt;/p&gt;

&lt;p&gt;于是，我便踏上了博客之路。&lt;/p&gt;

&lt;p&gt;现阶段目标是每周一篇吧，就像&lt;a href=&quot;http://discourse.codinghorror.com/t/how-to-achieve-ultimate-blog-success-in-one-easy-step/445/27&quot;&gt;Jeff说的一样&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pick whatever schedule works for you. And be realistic. I think starting with one post a month, like Catto, is a fine goal. Try to slowly ramp it up a bit over time as you get into the groove, and you’re on your way.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 23 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://www.liriansu.com/why-im-blogging</link>
        <guid isPermaLink="true">http://www.liriansu.com/why-im-blogging</guid>
        
        
      </item>
    
      <item>
        <title>如何优雅地使用Perl的常量模块</title>
        <description>&lt;p&gt;最近的Perl Coding遇到了一个问题：需要对一系列常量进行合法性检测。&lt;/p&gt;

&lt;p&gt;在Research&amp;amp;Develop后，有一些心得。&lt;/p&gt;

&lt;p&gt;本文从Perl的常量定义上，给出一个_自认为_优雅的解决方案。&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;perl&quot;&gt;Perl中一般的常量定义&lt;/h2&gt;

&lt;p&gt;在写项目的时候为了避免Magic Number的情况，我们经常需要定义常量。&lt;/p&gt;

&lt;p&gt;当然了，根据&lt;a href=&quot;http://coolshell.cn/articles/4758.html&quot;&gt;如何写出无法维护的代码&lt;/a&gt;的指导我们不应当定义常量，Number越Magic越好。&lt;/p&gt;

&lt;p&gt;一般来说，Perl中的常量如下：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    use constant CONST_PI =&amp;gt; 3.1416;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在模块化的编码过程中，随着常量的增多，我们会需要把这些常量放到一个常量模块(Perl Module)里面：&lt;/p&gt;

&lt;p&gt;这样的做法也符合DRY(Don’t Repeat Yourself)的原则。#DRYBestPractice?&lt;/p&gt;

&lt;p&gt;比如说在哼哧哼哧地写了一阵子以后，我们有下面这个常量模块。&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    package Lirian::Constants;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    use strict;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    use warnings;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    #Math Const
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    use constant CONST_PI =&amp;gt; 3.1416;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    use constant CONST_E  =&amp;gt; 2.718;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    #Default Config Parm Name
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    use constant PARM_DB_NAME  =&amp;gt; &#39;dbName&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    use constant PARM_DB_HOST  =&amp;gt; &#39;dbHost&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    use constant PARM_GIT_USER =&amp;gt; &#39;gitUser&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    require Exporter;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    our @ISA = qw(Exporter);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    our @EXPORT_OK = qw(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;        CONST_PI
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;        CONST_E
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        PARM_DB_NAME
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;        PARM_DB_HOST
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;        PARM_GIT_USER
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    );
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    our %EXPORT_TAGS = (
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;        all  =&amp;gt; \@EXPORT_OK,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;        math =&amp;gt; [qw(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;            CONST_PI
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;            CONST_E
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        )],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;        parm =&amp;gt; [qw(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;            PARM_DB_NAME
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;            PARM_DB_HOST
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;            PARM_GIT_USER
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;        )],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;    );
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;上面这段代码简单粗暴地展示了Perl中的常量模块。&lt;/p&gt;

&lt;p&gt;其中的&lt;code&gt;our @ISA = qw(Exporter);&lt;/code&gt;是表示本模块继承了&lt;a href=&quot;http://perldoc.perl.org/Exporter.html&quot;&gt;Exporter&lt;/a&gt;这个模块。&lt;/p&gt;

&lt;p&gt;通过这样的定义，我们便有了一个常量的“中心仓库”了。&lt;/p&gt;

&lt;p&gt;至于怎么使用，我们就来看下一节。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;使用常量模块&lt;/h2&gt;

&lt;p&gt;在上一节中，通过对Exporter的继承，我们有了一个Lirian::Constants模块。&lt;/p&gt;

&lt;p&gt;而一般地，我们会这么使用：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    package Lirian::Math;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    use Lirian::Constants qw(:all);
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    use strict;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    use warnings;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    sub get_circum {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;        my ($r) = @_;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        return 2 * CONST_PI * $r;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    1;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在正常的情况下，常量的使用方法比较简单，但假如需求有些绕：&lt;/p&gt;

&lt;p&gt;在程序的开始时，我们需要检验用户的配置文件，确保每个条目用户都是有效的。&lt;/p&gt;

&lt;p&gt;比如说需求文件如下：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    dbName=github
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    dbHost=localhost
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    gitUser=LKI
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;显然地，一种简单但稍微蠢了点的方法是这么做：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    sub validate_config_dumb {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;        my ($conf) = @_;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        validate_parm($conf, PARM_DB_NAME);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;        validate_parm($conf, PARM_DB_HOST);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        validate_parm($conf, PARM_GIT_USER);
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;这样做有几个问题：&lt;/p&gt;

&lt;p&gt;1.config parameter一多，代码就很长，丑&lt;br /&gt;
2.增加config constant时，不仅要改常量模块，这里也要加，累&lt;br /&gt;
3.这样的代码提交上去感觉好丢脸，蠢&lt;br /&gt;
4.以上三点在&lt;a href=&quot;http://coolshell.cn/articles/2058.html&quot;&gt;撞大运编程&lt;/a&gt;里都不是问题&lt;/p&gt;

&lt;p&gt;那怎么样做才算是优雅的做法呢？&lt;/p&gt;

&lt;h2 id=&quot;perlexport&quot;&gt;利用Perl的Export机制&lt;/h2&gt;

&lt;p&gt;在Exporter中，定义在%EXPORT_TAGS中的文件可以直接引用：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    my $tags      = \$Lirian::Constants::EXPORT_TAGS;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    my $math_tags = $tags-&amp;gt;{math}; # [&#39;CONST_PI&#39;, &#39;CONST_E&#39;];
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    my $parm_tags = $tags-&amp;gt;{parm}; # [&#39;PARM_DB_NAME&#39;, &#39;PARM_DB_HOST&#39;, &#39;PARM_GIT_USER&#39;];
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;这样就可以拿到常量的名字了，此时我们便需要&lt;a href=&quot;http://stackoverflow.com/questions/2187682/how-do-i-access-a-constant-in-perl-whose-name-is-contained-in-a-variable&quot;&gt;在Perl中根据变量名获取变量值&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    my $name  = &#39;CONST_PI&#39;;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    my $value = Lirian::Constants-&amp;gt;$name; # 3.1416
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;所以在上一小节的问题中，我们可以得出一个更优雅的解决方案啦~&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    sub validate_config {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;        my ($conf) = @_;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        my $tags      = \$Lirian::Constants::EXPORT_TAGS;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;        my $parm_tags = $tags-&amp;gt;{parm};
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        foreach my $parm_name (@$parm_tags) {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;            my $parm_value = Lirian::Constants-&amp;gt;$parm_name;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;            validate_parm($conf, $parm_value);
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;        }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;大功告成！从此以后在加常量的同时，validate_config会自动地检验新增的配置选项啦~&lt;/p&gt;

&lt;p&gt;此时便可以使用&lt;a href=&quot;http://whatthecommit.com/&quot;&gt;一个酷炫的Git Commit Message&lt;/a&gt;来提交工作啦！&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Jul 2015 04:56:06 +0800</pubDate>
        <link>http://www.liriansu.com/how-to-set-perl-constant-module</link>
        <guid isPermaLink="true">http://www.liriansu.com/how-to-set-perl-constant-module</guid>
        
        
      </item>
    
      <item>
        <title>Vagrant-up遇到mount no device的解决方案</title>
        <description>&lt;p&gt;今天跑&lt;code&gt;vagrant up&lt;/code&gt;的时候遇到了这个问题：&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; cvc-tools: Machine booted and ready!
==&amp;gt; cvc-tools: Checking for guest additions in VM...
==&amp;gt; cvc-tools: Configuring and enabling network interfaces...
==&amp;gt; cvc-tools: Mounting shared folders...
    cvc-tools: /work =&amp;gt; D:/work/
Failed to mount folders in Linux guest. This is usually because
the &quot;vboxsf&quot; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u devel`,gid=`getent group devel | cut -d:
-f3` work /work
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看了 https://github.com/mitchellh/vagrant/issues/1657&lt;br /&gt;
以后，明白这是&lt;code&gt;yum update&lt;/code&gt;更新了内核，但是没有更新VirtualBox的连接的问题。&lt;/p&gt;

&lt;p&gt;于是重新添加一下VBox：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[lirian@localhost ~]$ sudo /etc/init.d/vboxadd setup
Removing existing VirtualBox non-DKMS kernel modules       [  OK  ]
Building the VirtualBox Guest Additions kernel modules
The headers for the current running kernel were not found. If the
following
module compilation fails then this could be the reason.
The missing package can be probably installed with
yum install kernel-devel-2.6.18-404.el5

Building the main Guest Additions module                   [FAILED]
(Look at /var/log/vboxadd-install.log to find out what went wrong)
Doing non-kernel setup of the Guest Additions              [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据以上信息，得知现在在跑的内核开发包缺失，于是再跑一下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install kernel-devel-2.6.18-404.el5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后再vagrant up或者手动mount就可以解决问题了。&lt;/p&gt;

&lt;p&gt;总结：vagrant up遇到mount error: no such device可以通过以下脚本解决：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install kernel-devel-2.6.18-404.el5
/etc/init.d/vboxadd setup
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 15 May 2015 18:29:05 +0800</pubDate>
        <link>http://www.liriansu.com/vagrant-up-but-mount-no-device-zh</link>
        <guid isPermaLink="true">http://www.liriansu.com/vagrant-up-but-mount-no-device-zh</guid>
        
        
      </item>
    
      <item>
        <title>Solution for vagrant-up error: mount no device</title>
        <description>&lt;p&gt;Today I encounter a problem running &lt;code&gt;vagrant up&lt;/code&gt;：&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; cvc-tools: Machine booted and ready!
==&amp;gt; cvc-tools: Checking for guest additions in VM...
==&amp;gt; cvc-tools: Configuring and enabling network interfaces...
==&amp;gt; cvc-tools: Mounting shared folders...
    cvc-tools: /work =&amp;gt; D:/work/
Failed to mount folders in Linux guest. This is usually because
the &quot;vboxsf&quot; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u devel`,gid=`getent group devel | cut -d:
-f3` work /work
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to https://github.com/mitchellh/vagrant/issues/1657 &lt;/p&gt;

&lt;p&gt;_This is usually a result of the guest’s package manager upgrading the&lt;/p&gt;

&lt;p&gt;kernel without rebuilding the VirtualBox Guest Additions_ by lenciel. So&lt;br /&gt;
we run vboxadd accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [lirian@localhost ~]$ sudo /etc/init.d/vboxadd setup
    Removing existing VirtualBox non-DKMS kernel modules       [  OK  ]
    Building the VirtualBox Guest Additions kernel modules
    The headers for the current running kernel were not found. If the
    following
    module compilation fails then this could be the reason.
    The missing package can be probably installed with
    yum install kernel-devel-2.6.18-404.el5

    Building the main Guest Additions module                   [FAILED]
    (Look at /var/log/vboxadd-install.log to find out what went wrong)
    Doing non-kernel setup of the Guest Additions              [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the message we can know current running kernel were not found. So&lt;br /&gt;
we run:&lt;code&gt;yum install kernel-devel-2.6.18-404.el5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After all, we can run &lt;code&gt;vagrant up&lt;/code&gt; or mount the directory manually.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 May 2015 18:29:05 +0800</pubDate>
        <link>http://www.liriansu.com/vagrant-up-but-mount-no-device-en</link>
        <guid isPermaLink="true">http://www.liriansu.com/vagrant-up-but-mount-no-device-en</guid>
        
        
      </item>
    
      <item>
        <title>用Openpyxl做两个Excel文件的比对</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;最近老是要做比对Excel报表的工作，于是想写一个Python的小脚本来做这个工作。&lt;br /&gt;
关于Python的Excel处理，以前只用过xlrd库，处理的是Office03的.xls文件。&lt;br /&gt;
这次写小工具的同时也是学习一下新的东西。&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;section-1&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;由于本次要比对的报表是Office07的.xlsx文件，上网查了一下Python怎么做比较合适。&lt;br /&gt;
看了几篇心得以后，敲定用Openpyxl（参考如下链接：）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.gocalf.com/blog/python-read-write-excel.html&quot;&gt;Python处理Excel的四个工具&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是接下来是装Openpyxl，到官网上按照流程装了一发：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://pythonhosted.org/openpyxl/&quot;&gt;A Python Library: Openpyxl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于源码是到BitBucket上拖下来的，所以顺便还装了SourceTree。&lt;br /&gt;
据说SourceTree还有Git的相关功能，下次可以体验一下。&lt;/p&gt;

&lt;h2 id=&quot;openpyxl&quot;&gt;使用Openpyxl&lt;/h2&gt;

&lt;p&gt;Openpyxl装好以后直接import就能用啦：&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;from&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;openpyxl&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Openpyxl还提供了一个非常棒的教程~~（有点过于简单~~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://pythonhosted.org/openpyxl/tutorial.html&quot;&gt;Openpyxl Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Openpyxl还有个弊端就是文档不怎么详细，只能去翻源码。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最终代码&lt;/h2&gt;

&lt;p&gt;可以到我写的PythonScripts里找到我写的版本：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LKI/PythonScripts/tree/master/ExcelComparer&quot;&gt;PythonScripts - ExcelComparer&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Aug 2014 18:31:08 +0800</pubDate>
        <link>http://www.liriansu.com/compare-excel-using-openpyxl/</link>
        <guid isPermaLink="true">http://www.liriansu.com/compare-excel-using-openpyxl/</guid>
        
        
      </item>
    
  </channel>
</rss>
